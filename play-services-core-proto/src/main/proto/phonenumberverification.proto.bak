syntax = "proto3";

option java_package = "org.microg.gms.phonenumberverification";

import "google/protobuf/timestamp.proto";

// Project Constellation aims at determining, verifying and maintaining the phone numbers of the Android devices
// so that Google services can use them for different applications, such as near-tier graphs.
// Google Phone Device Verification API is the internal API to the Constellation GMS core module which enables this project.
// (go/constellation-overview)
service PhoneDeviceVerification {
  // Client tells the server about its current state. The server can initiate verifications at this time
  // or refresh their states. If the new states of some verifications are pending, then client will call
  // Proceed for just those verifications. This is called:
  // - When the client is a new client coming online for the first time. It has checked the consent using GetConsent.
  // - When the client detected an event that would put its last verification state(s) in question or introduces
  //   new unknown verifications (e.g. IMSI change, or SIM added).
  // - Periodically based on server returned next_sync_time in last Sync call.
  rpc Sync(SyncRequest) returns (SyncResponse);

  // When client's current verification state is pending, it calls this method to complete the verification.
  // The response is a new verification state which can be: Verified (on success), None (on failure),
  // or Pending (on retriable errors). The difference between this and Refresh is that current state is
  // pending in this case, while it's verified (or expired) in the case of Refresh.
  rpc Proceed(ProceedRequest) returns (ProceedResponse);

  // Checks if the constellation client can initiate the verification or not. If device has consent,
  // the client can send all information about SIMs and Gaias. If some Gaias have consent, the client
  // can only send information about those Gaias, and receive those verifications.
  rpc GetConsent(GetConsentRequest) returns (GetConsentResponse);

  // Stores device level consent that allows Google to periodically verify the device's phone number.
  rpc SetConsent(SetConsentRequest) returns (SetConsentResponse);
}

// SyncRequest is the request to sync
message SyncRequest {
  // The current client state of verifications.
  // - If this is new client calling the server for the first time, it should have NONE verifications
  //   for each SIM and Gaia on device.
  // - If this is after a client detected event, it should have all server returned verifications that
  //   are *unaffected* by client change and NONE verifications for newly seen IMSI/Gaia (but none of
  //   the removed IMSI or Gaias).
  // - If this is a periodic sync, it should have all server returned verifications, but updated with
  //   any client side changes that didn't warrant an immediate sync (e.g. IMSI should be the currently seen IMSI).
  repeated Verification verifications = 3;

  // (Required)
  RequestHeader header = 4;

  // Verification tokens used in the backup and restore flow for verifying a new device that was
  // phone number verified in the past http://goto.google.com/c11n-br-acquisition
  // repeated VerificationToken verification_tokens = <unknown field number>;
}

// SyncResponse is the response to sync
message SyncResponse {
  repeated VerificationResponse responses = 1;

  // Time till by when the client needs to sync again. (Required)
  ServerTimestamp next_sync_time = 2;

  // (Required)
  ResponseHeader header = 3;

  // droidguard response
  DroidGuardTokenResponse droidguard_token_response = 4;

  repeated VerificationToken verification_tokens = 5;
}

// ProceedRequest is the request to proceed
message ProceedRequest {
  // Pending Verification to proceed. (Required)
  Verification verification = 2;

  // Client's response to the challenge. (Required for MT and CARRIER_ID)
  ChallengeResponse challenge_response = 3;

  // (Required)
  RequestHeader header = 4;
}

// ProceedResponse is the response to proceed
message ProceedResponse {
  // The new verification for the client. It can be Verified (on success), None (on failure),
  // or still Pending (on retriable errors). (Required)
  Verification verification = 1;

  // (Required)
  ResponseHeader header = 2;

  // Time till by when the client needs to sync again. (Required)
  ServerTimestamp next_sync_time = 3;

  // droidguard response
  DroidGuardTokenResponse droidguard_token_response = 4;
}

// GetConsentRequest is the request to get consent
message GetConsentRequest {
  DeviceId device_id = 1;
  repeated GaiaId gaia_ids = 2;
  repeated Param api_params = 3;
  RequestHeader header = 4;
  StructuredAPIParams structured_api_params = 5;
  bool include_asterism_consents = 6;
  string imei = 7;
  AsterismClient asterism_client = 8;
  bool include_device_permission_info = 9;
}

// GetConsentResponse is the response to get consent
message GetConsentResponse {
  DeviceConsent device_consent = 1;
  repeated AppSpecificConsent app_specific_consents = 2;
  ResponseHeader header = 3;
  repeated GaiaReachabilityConsent gaia_reachability_consents = 4;
  ServerTimestamp next_sync_time = 5;
  ClientBehavior client_behavior = 6;
  AsterismClient asterism_client = 7;
  repeated AsterismConsent asterism_consents = 8;
  DroidGuardTokenResponse droidguard_token_response = 9;
  DevicePermissionInfo device_permission_info = 10;
}

// SetConsentRequest is the request to set consent
message SetConsentRequest {
  // (Required)
  RequestHeader header = 1;
  // One of the following would be set. (Optional) one of the consent messages should be set. See the TODO below (b/294101685)
  DeviceConsent device_consent = 2;
  AsterismClient asterism_client = 4;
  RcsConsentVersion consent_version = 5;
  // PNV Device Verification Consent.
  DeviceVerificationConsent device_verification_consent = 6;
  repeated Param api_params = 7;
  // (Optional) one of the consent messages should be set Used to set consent via OnDemandConsent flow.
  OnDemandConsent on_demand_consent = 8;
  bytes audit_token = 9;
}

// SetContentResponse is the response to set consent
message SetConsentResponse {
  ResponseHeader header = 1;
}

// VerificationResponse in SyncResponse
message VerificationResponse {
  // The server's state of a verification in Request - which can be:
  // - Pending (upon challenge),
  // - Verified (if still good, or verified without challenge)
  // - None (if can't be verified, or error). (Required)
  Verification verification = 1;
  StatusProto error = 2;
}

// Verification
message Verification {
  // To which entity, this verification is associated. (Required)
  VerificationAssociation association = 1;

  // Verification state
  VerificationState state = 2;

  // Verification information of a verified user
  // Populated by the server when state = VERIFIED
  VerificationInfo verification_info = 3;

  // Verification information when a challenge is given
  // Populated by the server when state = PENDING
  PendingVerificationInfo pending_verification_info = 4;

  // Telephony information of the SIM that is being verified. This is transient data, only filled
  // from client->server calls. The server will never fill this field. Client should fill it fresh
  // when it sends this. EXCEPTION: server will send back the exact telephony info given in the request
  // for any verifications returned with state PENDING, until the client starts caching the telephony info.
  // Used by the server to determine verification and reverification policies.
  // (Required for SIM verifications in *client requests*).
  TelephonyInfo telephony_info = 5;

  // Additional API params set in the request and response for each verification.
  // We use free-form key-values than a proto, to make the client agnostic to the actual params.
  repeated Param api_params = 6;

  // Client's preferences of challenge methods.
  ChallengePreference challenge_preference = 7;

  // Specified API params
  StructuredAPIParams structured_api_params = 8;

  // Verification information when the user is unverified
  // Populated by the server when state = NONE
  bytes unverified_info = 9;
}

enum VerificationState {
  // UNKNOWN is treated as nil state
  VERIFICATION_STATE_UNKNOWN = 0;
  // no state.
  VERIFICATION_STATE_NONE = 1;
  // pending_verification_info should be set.
  VERIFICATION_STATE_PENDING = 2;
  // verification_info should be set.
  VERIFICATION_STATE_VERIFIED = 3;
}

// To which entity, the verification is associated.
message VerificationAssociation {
  // When the verification is associated with SIM. i.e. Constellation performed verification
  SIMAssociation sim = 1;
  // When the verification is associated with the Gaia. i.e. Focus verification.
  // Note: We decided to not use this for now. Logged in Gaias are part of the client info.
  GaiaAssociation gaia = 2;
}

// For SIM associated verification
message SIMAssociation {
  SIMInfo sim_info = 1;
  repeated GaiaId gaia_ids = 2;
  SIMSlot sim_slot = 4;
}

// For Gaia associated verification
message GaiaAssociation {
  GaiaId gaia_id = 1;
}

// SIM info
message SIMInfo {
  repeated string imsi = 1;
  string sim_readable_number = 2;
  repeated TelephonyPhoneNumber telephony_phone_number = 3;
  string iccid = 4;
}

message TelephonyPhoneNumber {
  string number = 1;
  PhoneNumberSource source = 2;
}

enum PhoneNumberSource {
  PHONE_NUMBER_SOURCE_UNKNOWN = 0;
  PHONE_NUMBER_SOURCE_CARRIER = 1;
  PHONE_NUMBER_SOURCE_IUCC = 2;
  PHONE_NUMBER_SOURCE_IMS = 3;
}

message SIMSlot {
  int32 index = 1;
  int32 sub_id = 2;
}

message GaiaId {
  string access_token = 1;
}

// Param for the API.
message Param {
  string name = 1;
  string value = 2;
}

// Client Challenge Preference
message ChallengePreference {
  repeated string capabilities = 1;
  MTChallengePreference mt_preference = 2;
  MOChallengePreference mo_preference = 3;
  FlashCallChallengePreference flash_call_preference = 4;
}

// MT Challenge Preference
message MTChallengePreference {
  PreferredCarrierInfo preferred_carrier_info = 1;
  string localized_message_template = 2;
  DataSMSInfo data_sms_info = 3;
}

message PreferredCarrierInfo {
  string name = 1;
  bool lookup_by_imsi = 2;
  bool enforce_carrier_resolution_override = 3;
}

// Info required to send data SMS.
message DataSMSInfo {
  int32 port = 1;
}

// MO Challenge Preference
message MOChallengePreference {
  DataSMSInfo data_sms_info = 1;
}

// Flash Call Challenge Preference
message FlashCallChallengePreference {
  PhoneRange phone_range = 1;
}

// PhoneRange defines a block of continuous phone numbers to be used on FlashCall verification the phone numbers go from country_code+prefix+lower_bound to country_code+prefix+upper_bound
message PhoneRange {
  string country_code = 1;
  string prefix = 2;
  string lower_bound = 3;
  string upper_bound = 4;
}

// For verifying specific IMSIs
message IMSIRequest {
  string imsi = 1;
  string phone_number_hint = 2;
}

// Challenge response.
message ChallengeResponse {
  MTChallengeResponse mt_challenge_response = 1;
  CarrierIDChallengeResponse carrier_id_challenge_response = 2;
  MOChallengeResponse mo_challenge_response = 3;
  RegisteredSMSChallengeResponse registered_sms_challenge_response = 4;
  FlashCallChallengeResponse flash_call_challenge_response = 5;
  Ts43ChallengeResponse ts43_challenge_response = 9;
}

// Response to MT challenge.
message MTChallengeResponse {}

// Response to Carrier Id challenge.
message CarrierIDChallengeResponse {}

message MOChallengeResponse {}

// Response to Registered SMS challenge.
message RegisteredSMSChallengeResponse {}

// Response to FlashCall challenge.
message FlashCallChallengeResponse {}

// Pending verification information
message PendingVerificationInfo {
  string mt_hint_number = 1;
  // Challenge given to the client, that can help with proceeding this verification towards completion. (Required)
  Challenge challenge = 2;
  // Asterism client for this pending verification
  AsterismClient asterism_client = 3;
  // Billing client for this pending verification passed along to proceed.
  BillingClient billing_client = 4;
}

enum AsterismClient {
  ASTERISM_CLIENT_UNKNOWN = 0;
  ASTERISM_CLIENT_CONSTELLATION = 1;
  ASTERISM_CLIENT_RCS = 2;
  ASTERISM_CLIENT_ONE_TIME_VERIFICATION = 3;
}

enum BillingClient {
  BILLING_CLIENT_UNKNOWN = 0;
  BILLING_CLIENT_CONSTELLATION = 1;
  BILLING_CLIENT_CONSTELLATION_ACQUISITION = 2;
  BILLING_CLIENT_CONSTELLATION_REVERIFICATION = 3;
  BILLING_CLIENT_CONSTELLATION_INTERNATIONAL_MO = 4;
  BILLING_CLIENT_RCS = 5;
  BILLING_CLIENT_RCS_MO = 6;
  BILLING_CLIENT_RCS_HB_MO = 7;
  BILLING_CLIENT_RCS_JIBE = 8;
  BILLING_CLIENT_RCS_OTP_PROBER = 9;
  BILLING_CLIENT_ONE_TIME_VERIFICATION_VERIFIER_SIGNUP_RECOVERY = 10;
  BILLING_CLIENT_ONE_TIME_VERIFICATION_ABRA_USERNAME_RECOVERY = 11;
  BILLING_CLIENT_ONE_TIME_VERIFICATION_INTERNATIONAL_MO = 12;
  BILLING_CLIENT_RCS_PROVISIONING_UPI = 13;
  BILLING_CLIENT_GAIA_USERNAME_RECOVERY = 14;
  BILLING_CLIENT_GAIA_USERNAME_RECOVERY_INT_MO = 15;
  BILLING_CLIENT_MEET = 16;
  BILLING_CLIENT_UPI_FREE_SMS = 17;
  BILLING_CLIENT_GAIA_DEVICE_VERIFICATION = 18;
  BILLING_CLIENT_GAIA_DEVICE_VERIFICATION_INT_MO = 19;
  BILLING_CLIENT_UPI_CARRIER_TOS = 20;
  BILLING_CLIENT_UPI_INTL_MO = 21;
  BILLING_CLIENT_FIREBASE_PNV = 22;
}

// Verification information
message VerificationInfo {
  string phone_number = 1;
  google.protobuf.Timestamp verification_time = 2;
  AsterismClient asterism_client = 3;
  VerificationToken verification_token = 4;
  ChallengeType challenge_method = 5;
}

message Challenge {
  ChallengeID challenge_id = 1;
  ChallengeType type = 2;
  // Time till when this challenge can be responded. After this time, the client can't proceed
  // to complete the verification, or it needs to start over. (Required)
  ServerTimestamp expiry_time = 3;
  // Group Id will be used by parallel execution to group challenges, one of the challenges in group
  // need to be successful for the entire group to be considered successful.
  int32 group_id = 4;
  // Challenge by TS.43
  Ts43Challenge ts43_challenge = 12;
}

// Challenge ID
message ChallengeID {
  string id = 1;
}

enum ChallengeType {
  CHALLENGE_TYPE_UNKNOWN = 0;
  CHALLENGE_TYPE_MO_SMS = 1;
  CHALLENGE_TYPE_MT_SMS = 2;
  CHALLENGE_TYPE_CARRIER_ID = 3;
  CHALLENGE_TYPE_IMSI_LOOKUP = 4;
  CHALLENGE_TYPE_REGISTERED_SMS = 5;
  CHALLENGE_TYPE_FLASH_CALL = 6;
  CHALLENGE_TYPE_TS43 = 11;
}

// TS43 Challenge. LINT.IfChange
message Ts43Challenge {
  Ts43Type ts43_type = 1;
  string entitlement_url = 2;
  ServiceEntitlementRequest service_entitlement_request = 3;
  ClientChallenge client_challenge = 5;
  string app_id = 6;
  string eap_aka_realm = 7;
  ServerChallenge server_challenge = 8;
}

message Ts43Type {
  Ts43Integrator integrator = 1;
  RcsRouteInfo rcs_route_info = 2;
}

enum Ts43Integrator {
  TS43_INTEGRATOR_UNKNOWN = 0;
  TS43_INTEGRATOR_UNSPECIFIED = 1;
  TS43_INTEGRATOR_JIO = 2;
  TS43_INTEGRATOR_TELUS = 3;
  TS43_INTEGRATOR_ERICSSON = 4;
  TS43_INTEGRATOR_HPE = 5;
  TS43_INTEGRATOR_TMO = 6;
  TS43_INTEGRATOR_TMO_SERVER = 7;
  TS43_INTEGRATOR_TELENOR = 8;
  TS43_INTEGRATOR_RCS_CIS_PROXY = 9;
  TS43_INTEGRATOR_MOBI_US = 10;
  TS43_INTEGRATOR_SFR = 11;
  TS43_INTEGRATOR_SASKTEL_CANADA = 12;
  TS43_INTEGRATOR_MOTIVE = 13;
  TS43_INTEGRATOR_DT = 14;
  TS43_INTEGRATOR_DT_SERVER = 15;
  TS43_INTEGRATOR_GLIDE = 16;
  TS43_INTEGRATOR_GLIDE_GETPHONENUMBER = 17;
  TS43_INTEGRATOR_NETLYNC = 18;
  TS43_INTEGRATOR_ORANGE_FRANCE = 19;
  TS43_INTEGRATOR_AMDOCS = 20;
  TS43_INTEGRATOR_IPIFICATION = 21;
}

message RcsRouteInfo {
  string rcs_carrier_id = 1;
  OverrideTagSet rcs_override_tag_set = 2;
}

// Set of tags used for carrier configuration overrides (go/rcs-carrier-config#overrides). Must not contain PII. LINT.IfChange
message OverrideTagSet {
  repeated string tags = 1;
}

// Challenge to be performed based on client TS.43 specification.
message ClientChallenge {
  OdsaOperation get_phone_number_operation = 1;
}

message ServerChallenge {
  OdsaOperation acquire_temporary_token_operation = 1;
}

// Client response Ts43 Challenge.
message Ts43ChallengeResponse {
  Ts43Type ts43_type = 1;
  ClientChallengeResponse client_challenge_response = 2;
  ServerChallengeResponse server_challenge_response = 3;
  Error error = 4;
  repeated string http_history = 5;
}

// Challenge response to client based Ts43.
message ClientChallengeResponse {
  string payload = 1;
  string get_phone_number_response = 2;
}

// Challenge response to server based Ts43.
message ServerChallengeResponse {
  string temporary_token = 1;
  string acquire_temporary_token_response = 2;
}

// Error observed while performing Ts43 Verification.
message Error {
  ErrorType error_type = 1;
  ServiceEntitlementError service_entitlement_error = 2;
}

enum ErrorType {
  ERROR_TYPE_VERIFICATION_ERROR_TYPE_UNSPECIFIED = 0;
  ERROR_TYPE_NOT_SUPPORTED = 1;
  ERROR_TYPE_CHALLENGE_NOT_SET = 2;
  ERROR_TYPE_INTERNAL_ERROR = 3;
  ERROR_TYPE_RUNTIME_ERROR = 4;
  ERROR_TYPE_JSON_PARSE_ERROR = 5;
}

// Error received from service entitlement library.
message ServiceEntitlementError {
  int32 error_code = 1;
  int32 http_status = 2;
  string api = 3;
}

// Passed by android client to entitlement library for performing EAP-AKA verification and GetPhoneNumber. This is sent to C11n android client module by server as part of Sync response cs/third_party/java_src/service_entitlement/java/com/android/libraries/entitlement/ServiceEntitlementRequest.java
message ServiceEntitlementRequest {
  int32 configuration_version = 1;
  string entitlement_version = 2;
  string authentication_token = 3;
  string temporary_token = 4;
  string terminal_id = 5;
  string terminal_vendor = 6;
  string terminal_model = 7;
  string terminal_software_version = 8;
  string notification_token = 9;
  int32 notification_action = 10;
  string accept_content_type = 13;
  string boost_type = 14;
  string gid1 = 15;
}

// Passed by android client to entitlement library for performing GetPhoneNumber. This is sent to C11n android client module by server as part of Sync response cs/third_party/java_src/service_entitlement/java/com/android/libraries/entitlement/EsimOdsaOperation.java
message OdsaOperation {
  string operation = 1;
  repeated string operation_targets = 3;
  int32 operation_type = 4;
  string target_terminal_iccid = 12;
}

// Group of named API params, each of which is used in a subset of the existing APIs
message StructuredAPIParams {
  // Used to identify the policy related with a sync, proceed or getConsent request
  string policy_id = 1;
  IdTokenRequest id_token_request = 3;
  string calling_package = 4;
  repeated IMSIRequest imsi_requests = 5;
}

message IdTokenRequest {
  string certificate_hash = 1;
  string token_nonce = 2;
}

// RequestHeader is the header for each client request.
message RequestHeader {
  // Client info (Required)
  ClientInfo client_info = 1;
  // Client auth contains client signature signed by the client's private key. This should be left blank
  // until the client has been told via ClientInfoUpdate that their public key has been added to storage.
  // If the client wants to change their stored public key, this should be signed with their previous private key.
  ClientAuth client_auth = 2;
  // UUID used for a logging trace for a client session. (Required)
  string session_id = 3;
  // Used for better quota control on the server, based information like is this a user visible call,
  // or is this call gives us critical change to the server to know about, etc. Mostly ignored.
  // Only used to know which requests to prioritize when the systems are overloaded. (Required)
  RequestTrigger trigger = 4;
}

// Client's authentication
message ClientAuth {
  DeviceId device_id = 1;
  bytes client_sign = 2;
  google.protobuf.Timestamp sign_timestamp = 3;
}

// Device ID
message DeviceId {
  string iid_token = 1;
  int64 device_android_id = 2;
  int64 device_user_id = 3;
  int64 user_android_id = 4;
}

// Client info Next ID: 22
message ClientInfo {
  // Device id of the client. (Required)
  DeviceId device_id = 1;
  // Client public key. Used for client authentication in future. (Required)
  bytes client_public_key = 2;
  // User's locale. Used for translating message templates, etc. (Required)
  string locale = 3;
  // User's GMScore version number. (Required)
  int32 gmscore_version_number = 4;
  // User's human readable (and more granular) GMScore version. (Required)
  string gmscore_version = 5;
  // User's Android SDK version. (Required)
  int32 android_sdk_version = 6;
  // Client's preferences of challenge methods. (Moved into Verification)
  ChallengePreference challenge_preference = 7;
  // Device signals for this client. (Required for Sync and Proceed calls before client starts signing.)
  DeviceSignals device_signals = 8;
  // If the GMS core has the READ_PRIVILEGED_PHONE_STATE permission. This helps us determine Carrier ID.
  bool has_read_privileged_phone_state_permission = 11;
  // Gaia ids seen on the device, used for the client state. (Required when Gaias are signed in on the device.)
  repeated GaiaId gaia_ids = 12;
  // Fields to derive client's country.
  CountryInfo country_info = 13;
  repeated ConnectivityInfo connectivity_infos = 14;
  // The model of the device making this request
  string model = 15;
  // The manufacturer of the device making this request
  string manufacturer = 16;
  // The type of user profile the client runs on (regular user or work profile).
  UserProfileType user_profile_type = 17;
  DeviceType device_type = 18;
  bool is_standalone_device = 19;
  // The fingerprint of the device making this request
  // Obtained from https://developer.android.com/reference/android/os/Build#FINGERPRINT
  string device_fingerprint = 21;
}

// DeviceSignals in ClientInfo
message DeviceSignals {
  string droidguard_result = 1;
  string droidguard_token = 2;
}

// CountryInfo of the SIM.
message CountryInfo {
  repeated string sim_countries = 1;
  repeated string network_countries = 2;
}

// Connectivity information for the device
message ConnectivityInfo {
  ConnectivityType type = 1;
  ConnectivityState state = 2;
  ConnectivityAvailability availability = 3;
}

enum ConnectivityType {
  CONNECTIVITY_TYPE_UNKNOWN = 0;
  CONNECTIVITY_TYPE_WIFI = 1;
  CONNECTIVITY_TYPE_MOBILE = 2;
}

enum ConnectivityState {
  CONNECTIVITY_STATE_UNKNOWN = 0;
  CONNECTIVITY_STATE_CONNECTING = 1;
  CONNECTIVITY_STATE_CONNECTED = 2;
  CONNECTIVITY_STATE_DISCONNECTING = 3;
  CONNECTIVITY_STATE_DISCONNECTED = 4;
  CONNECTIVITY_STATE_SUSPENDED = 5;
}

enum ConnectivityAvailability {
  CONNECTIVITY_AVAILABILITY_UNKNOWN = 0;
  CONNECTIVITY_AVAILABLE = 1;
  CONNECTIVITY_NOT_AVAILABLE = 2;
}

enum DeviceType {
  DEVICE_TYPE_UNKNOWN = 0;
  DEVICE_TYPE_PHONE = 1;
  DEVICE_TYPE_PHONE_GO = 2;
  DEVICE_TYPE_TV = 3;
  DEVICE_TYPE_WEARABLE = 4;
  DEVICE_TYPE_AUTOMOTIVE = 5;
  DEVICE_TYPE_BATTLESTAR = 6;
  DEVICE_TYPE_CHROME_OS = 7;
  DEVICE_TYPE_XR = 8;
}

enum UserProfileType {
  UNKNOWN_PROFILE_TYPE = 0;
  REGULAR_USER = 1;
  MANAGED_PROFILE = 2;
}

// server encrypted verification record
message VerificationToken {
  bytes token = 1;
  google.protobuf.Timestamp expiration_time = 2;
}

// ResponseHeader is the header for response to client.
message ResponseHeader {
  ClientInfoUpdate client_info_update = 1;
  string session_id = 2;
  string server_build_label = 3;
}

// ClientInfoUpdate updates the ClientInfo
message ClientInfoUpdate {
  PublicKeyStatus public_key_status = 1;
}

enum PublicKeyStatus {
  PUBLIC_KEY_STATUS_NO_STATUS = 0;
  CLIENT_KEY_UPDATED = 1;
}

// LINT.IfChange ServerTimestamp has server time with when it was written.
// This helps clients take the difference in their clocks into account, before using it.
// LINT.IfChange ServerTimestamp has server time with when it was written. This helps clients take the difference in their clocks into account, before using it.
message ServerTimestamp {
  google.protobuf.Timestamp timestamp = 1;
  google.protobuf.Timestamp now = 2;
}

// server encrypted droidguard response
message DroidGuardTokenResponse {
  string droidguard_token = 1;
  google.protobuf.Timestamp droidguard_token_ttl = 2;
}

// Wire-format for a Status object
message StatusProto {
  int32 code = 1;
  string space = 2;
  string message = 3;
  bytes message_set = 5;
  int32 canonical_code = 6;
}

// The telephony information of the client which is used to choose a right challenge for this client based on policies. Next ID: 27
message TelephonyInfo {
  SIMState sim_state = 1;
  string group_id_level1 = 2;
  MobileOperatorInfo sim_operator = 3;
  MobileOperatorInfo network_operator = 4;
  RoamingState network_roaming = 5;
  RoamingState data_roaming = 6;
  SMSCapability sms_capability = 7;
  CarrierIdCapability carrier_id_capability = 8;
  PremiumSmsPermission premium_sms_permission = 9;
  PhoneType phone_type = 10;
  int32 subscription_count = 11;
  int32 subscription_count_max = 12;
  uint32 sim_index = 13;
  bool is_embedded_sim = 14;
  string imei = 15;
  ServiceState service_state = 16;
  GtafVerificationMethod gtaf_verification_method = 17;
  CarrierIdChallengePreference carrier_id_challenge_preference = 18;
  repeated CallEvent call_events = 19;
  repeated ServiceStateEvent service_state_events = 20;
  repeated SMSEvent sms_events = 21;
  repeated CellularNetworkEvent cellular_network_events = 22;
  bool skip_device_roaming_checks = 23;
  int32 sim_carrier_id = 25;
}

// Information about a mobile operator.
message MobileOperatorInfo {
  string country_code = 1;
  string mcc_mnc = 2;
  string operator_name = 3;
  uint32 nil_since_micros = 4;
  uint64 nil_since_usec = 5;
}

message CarrierIdChallengePreference {
  Integrator integrator = 1;
  GtafVerificationMethod gtaf_verification_method = 2;
}

// Event when a cellular data network was detected.
message CellularNetworkEvent {
  google.protobuf.Timestamp event_timestamp = 1;
  bool mobile_data_enabled = 2;
  bool airplane_mode_enabled = 3;
  bool mobile_data_always_on_enabled = 4;
  bool connected_to_wifi = 5;
  repeated CellularNetwork data_networks = 6;
}

// Information collected from device about a cellular network.
message CellularNetwork {
  repeated int32 network_capabilities = 1;
  bool can_reach_google = 2;
}

message CallEvent {
  google.protobuf.Timestamp event_timestamp = 1;
  CommunicationDirection event_direction = 2;
  PhoneNumberType number_type = 3;
}

message SMSEvent {
  google.protobuf.Timestamp event_timestamp = 1;
  CommunicationDirection event_direction = 2;
  PhoneNumberType number_type = 3;
}

// The SIM's service registration state.
message ServiceStateEvent {
  google.protobuf.Timestamp event_timestamp = 1;
  bool mobile_data_enabled = 2;
  bool airplane_mode_enabled = 3;
  int32 voice_registration_state = 4;
  int32 data_registration_state = 5;
  int32 voice_network_type = 6;
  int32 data_network_type = 7;
  int32 signal_strength = 8;
}

enum SIMState {
  SIM_STATE_UNKNOWN = 0;
  SIM_NOT_READY = 1;
  SIM_READY = 2;
}

enum PhoneType {
  PHONE_TYPE_UNKNOWN = 0;
  PHONE_TYPE_GSM = 1;
  PHONE_TYPE_CDMA = 2;
  PHONE_TYPE_SIP = 3;
}

enum RoamingState {
  ROAMING_STATE_UNKNOWN = 0;
  ROAMING_STATE_NOT_ROAMING = 1;
  ROAMING_STATE_ROAMING = 2;
}

enum SMSCapability {
  SMS_CAPABILITY_UNKNOWN = 0;
  SMS_CAPABILITY_INCAPABLE = 1;
  SMS_CAPABILITY_APP_RESTRICTED = 2;
  SMS_CAPABILITY_USER_RESTRICTED = 3;
  SMS_CAPABILITY_CAPABLE = 4;
}

enum CarrierIdCapability {
  CARRIER_ID_CAPABILITY_UNKNOWN = 0;
  CARRIER_ID_INCAPABLE = 1;
  CARRIER_ID_CAPABLE = 2;
}

enum PremiumSmsPermission {
  PREMIUM_SMS_PERMISSION_UNKNOWN = 0;
  PREMIUM_SMS_PROMPT_REQUIRED = 1;
  PREMIUM_SMS_PERMISSION_GRANTED = 2;
}

enum ServiceState {
  SERVICE_STATE_UNKNOWN = 0;
  SERVICE_STATE_IN_SERVICE = 1;
  SERVICE_STATE_OUT_OF_SERVICE = 2;
  SERVICE_STATE_EMERGENCY_ONLY = 3;
  SERVICE_STATE_POWER_OFF = 4;
}

enum GtafVerificationMethod {
  METHOD_UNKNOWN = 0;
  METHOD_CARRIER_ID_TS43 = 1;
  METHOD_CARRIER_ID_LEGACY = 2;
  METHOD_CARRIER_ID_TS43_UPI = 3;
}

enum Integrator {
  INTEGRATOR_UNSPECIFIED = 0;
  INTEGRATOR_TATA_GT1 = 1;
  INTEGRATOR_TATA_GT2 = 2;
}

enum CommunicationDirection {
  COMMUNICATION_DIRECTION_UNKNOWN = 0;
  COMMUNICATION_DIRECTION_INCOMING = 1;
  COMMUNICATION_DIRECTION_OUTGOING = 2;
  COMMUNICATION_DIRECTION_MISSED = 3;
}

enum PhoneNumberType {
  PHONE_NUMBER_TYPE_UNKNOWN = 0;
  PHONE_NUMBER_TYPE_LONG_NUMBER = 1;
  PHONE_NUMBER_TYPE_SHORT_CODE = 2;
}

// RequestTrigger triggers which requests to prioritize when the systems are overloaded.
message RequestTrigger {
  TriggerType type = 1;
}

enum TriggerType {
  TRIGGER_TYPE_UNKNOWN = 0;
  TRIGGER_TYPE_PERIODIC_CONSENT_CHECK = 1;
  TRIGGER_TYPE_PERIODIC_REFRESH = 2;
  TRIGGER_TYPE_SIM_STATE_CHANGED = 3;
  TRIGGER_TYPE_GAIA_CHANGE_EVENT = 4;
  TRIGGER_TYPE_USER_SETTINGS = 5;
  TRIGGER_TYPE_DEBUG_SETTINGS = 6;
  TRIGGER_TYPE_TRIGGER_API_CALL = 7;
  TRIGGER_TYPE_REBOOT_CHECKER = 8;
  TRIGGER_TYPE_SERVER_TRIGGER = 9;
  TRIGGER_TYPE_FAILURE_RETRY = 10;
  TRIGGER_TYPE_CONSENT_API_TRIGGER = 11;
  TRIGGER_TYPE_PNVR_DEVICE_SETTINGS = 12;
}

// Device consent
message DeviceConsent {
  ConsentValue consent = 2;
  ConsentCostSetting cost_setting = 3;
}

message AppSpecificConsent {
  ConsentValue consent = 1;
  AppIdentifier app = 2;
}

// Gaia reachability consent
message GaiaReachabilityConsent {
  GaiaId gaia_id = 1;
  ConsentValue reachability_consent = 2;
}

// On-demand consent, used by ODCv2 to set consent
message OnDemandConsent {
  ConsentValue consent = 1;
  GaiaId gaia_id = 2;
  string consent_variant = 3;
  string trigger = 4;
}

// Device-level phone number verification consent
message DeviceVerificationConsent {
  ConsentValue consent_value = 1;
  DeviceVerificationConsentSource consent_source = 2;
  DeviceVerificationConsentVersion consent_version = 3;
}

message ClientBehavior {
  DeviceConsent current_consent = 1;
  CheckerState checkers_state = 2;
}

message AsterismConsent {
  AsterismClient consumer = 1;
  ConsentValue consent = 2;
  RcsConsentVersion consent_version = 3;
  bool are_all_rcs_users_unmonitored = 4;
}

// Device permission info for device settings screen
message DevicePermissionInfo {
  DevicePermissionState permission_state = 1;
  DevicePermissionMode permission_mode = 2;
}

enum ConsentValue {
  CONSENT_VALUE_UNKNOWN = 0;
  CONSENT_VALUE_CONSENTED = 1;
  CONSENT_VALUE_NO_CONSENT = 2;
  CONSENT_VALUE_EXPIRED = 3;
}

enum ConsentCostSetting {
  CONSENT_COST_SETTING_NONE = 0;
  CONSENT_COST_SETTING_AUTOMATIC = 1;
  CONSENT_COST_SETTING_MANUAL = 2;
}

enum CheckerState {
  CHECKERS_UNKNOWN_STATE = 0;
  CHECKERS_INACTIVE = 1;
  CHECKERS_ACTIVE = 2;
}

enum DeviceVerificationConsentSource {
  DEVICE_VERIFICATION_CONSENT_SOURCE_UNSPECIFIED = 0;
  DEVICE_VERIFICATION_CONSENT_SOURCE_ANDROID_DEVICE_SETTINGS = 1;
  DEVICE_VERIFICATION_CONSENT_SOURCE_GAIA_USERNAME_RECOVERY = 2;
  DEVICE_VERIFICATION_CONSENT_SOURCE_AOB_SETUP_WIZARD = 3;
  DEVICE_VERIFICATION_CONSENT_SOURCE_MINUTEMAID_JS_BRIDGE = 4;
  DEVICE_VERIFICATION_CONSENT_SOURCE_GAIA_WEB_JS_BRIDGE = 5;
  DEVICE_VERIFICATION_CONSENT_SOURCE_AM_PROFILES = 6;
}

enum DeviceVerificationConsentVersion {
  DEVICE_VERIFICATION_CONSENT_VERSION_UNKNOWN = 0;
  DEVICE_VERIFICATION_CONSENT_VERSION_PHONE_VERIFICATION_DEFAULT = 1;
  DEVICE_VERIFICATION_CONSENT_VERSION_PHONE_VERIFICATION_MESSAGES_CALLS_V1 = 2;
  DEVICE_VERIFICATION_CONSENT_VERSION_PHONE_VERIFICATION_INTL_SMS_CALLS = 3;
  DEVICE_VERIFICATION_CONSENT_VERSION_PHONE_VERIFICATION_REACHABILITY_INTL_SMS_CALLS = 4;
}

enum RcsConsentVersion {
  RCS_CONSENT_VERSION_UNSPECIFIED = 0;
  RCS_CONSENT_VERSION_RCS_CONSENT = 1;
  RCS_CONSENT_VERSION_RCS_DEFAULT_ON_LEGAL_FYI = 2;
  RCS_CONSENT_VERSION_RCS_DEFAULT_ON_OUT_OF_BOX = 3;
  RCS_CONSENT_VERSION_RCS_SAMSUNG_UNFREEZE = 4;
  RCS_CONSENT_VERSION_RCS_DEFAULT_ON_LEGAL_FYI_IN_SETTINGS = 5;
}

enum AppIdentifier {
  APP_IDENTIFIER_UNKNOWN_APP = 0;
  APP_IDENTIFIER_RCS = 1;
}

enum DevicePermissionState {
  DEVICE_PERMISSION_STATE_UNSPECIFIED = 0;
  DEVICE_PERMISSION_STATE_GRANTED = 1;
  DEVICE_PERMISSION_STATE_DENIED = 2;
}

enum DevicePermissionMode {
  DEVICE_PERMISSION_MODE_UNSPECIFIED = 0;
  DEVICE_PERMISSION_MODE_LEGACY_DPNV = 1;
  DEVICE_PERMISSION_MODE_PNVR = 2;
  DEVICE_PERMISSION_MODE_NOT_ALLOWED = 3;
}
